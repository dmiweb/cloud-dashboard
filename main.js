(()=>{"use strict";const t=async(t,e={})=>await fetch(t,e);class e{constructor(){this.url="https://cloud-dashboard-backend-hnq4.onrender.com/"}sse(){return new EventSource(this.url+"sse")}websocket(){return new WebSocket(this.url)}async list(t){const e=await t(this.url);return await this.handlerResponse(e)}async create(t){const e=await t(this.url,{method:"POST"});return await this.handlerResponse(e)}async delete(t,e){const s=await e(this.url+"?id="+t,{method:"DELETE"});return await this.handlerResponse(s)}async handlerResponse(t){if(t.status>=200&&t.status<300)try{return await t.json()}catch(t){console.error(t)}}}class s{render(t,e){return`\n      <div id="${t}" class="instances__control-panel control-panel">\n        <div class="control-panel__server-id">${t}</div>\n        <div class="control-panel__state state">\n          <div class="state__title">Status:</div>\n          <div class="state__indicator"></div>\n          <div class="state__status">${e}</div>\n        </div>\n        <div class="control-panel__actions actions">\n          <div class="actions__title">Actions:</div>\n          <div class="actions__start-btn"></div>\n          <div class="actions__delete-btn">+</div>\n        </div>\n      </div>\n    `}remove(t){t.remove()}}class n{render(t,e,s){return`\n      <div class="worklog__item log-item">\n        <div class="log-item__date">${s}</div>\n        <div class="log-item__server-id log-server-id">  \n          <span class="log-server-id__title">Server:</span>\n          <span class="log-server-id__id">${t}</span>\n        </div>\n        <div class="log-item__info log-info">\n          <span class="log-info__title">INFO:</span>\n          <span class="log-info__text">${e}</span>\n        </div>\n      </div>\n    `}}class i{constructor(t){this.container=t,this.api=new e,this.instance=new s,this.log=new n,this.websocket=this.api.websocket(),this.bindToDOM=this.bindToDOM.bind(this),this.registerEvents=this.registerEvents.bind(this),this.requestCreateInstance=this.requestCreateInstance.bind(this),this.requestStateInstance=this.requestStateInstance.bind(this),this.requestRemoveInstance=this.requestRemoveInstance.bind(this)}static get markupDashboard(){return'\n      <div class="dashboard">\n        <div class="dashboard__instances instances">\n          <div class="instances__title">Your micro instances:</div>\n          <div class="instances__container"></div>\n          <div class="instances__create-btn">Create new instance</div>\n        </div>\n        <div class="worklog">\n          <div class="worklog__title">Worklog:</div>\n        </div>\n      </div>  \n    '}init(){this.bindToDOM()}async bindToDOM(){this.container.insertAdjacentHTML("beforeEnd",i.markupDashboard);const e=this.container.querySelector(".instances__container"),{data:s}=await this.api.list(t);s.forEach((t=>{e.insertAdjacentHTML("beforeEnd",this.instance.render(t.id,t.state))})),document.querySelectorAll(".state__status").forEach((t=>{if("running"===t.textContent){const e=t.closest(".instances__control-panel"),s=e.querySelector(".actions__start-btn"),n=e.querySelector(".state__indicator"),i=e.querySelector(".state__status");s.classList.add("actions__start-btn_start"),n.classList.add("state__indicator_running"),i.textContent="running"}})),this.subscribeOnEvents(),this.registerEvents()}requestCreateInstance(){this.api.create(t)}requestStateInstance(t){if(t.target.classList.contains("actions__start-btn")){const e=t.target.closest(".instances__control-panel");this.websocket.send(JSON.stringify({id:e.id}))}}requestRemoveInstance(e){if(e.target.classList.contains("actions__delete-btn")){const s=e.target.closest(".instances__control-panel");this.api.delete(s.id,t)}}registerEvents(){this.api.sse().addEventListener("message",(t=>{const e=JSON.parse(t.data);"Create command"===e.info&&this.received(e.id,e.info,e.timestamp),"Created"===e.info&&this.created(e.id,e.info,e.timeStamp),"Started"===e.info&&this.started(e.id,e.info,e.timeStamp),"Stopped"===e.info&&this.stopped(e.id,e.info,e.timeStamp),"Removed"===e.info&&this.removed(e.id,e.info,e.timeStamp)}))}subscribeOnEvents(){document.querySelector(".instances__create-btn").addEventListener("click",this.requestCreateInstance),this.container.addEventListener("click",this.requestStateInstance),this.container.addEventListener("click",this.requestRemoveInstance)}received(t,e,s){this.createLog(t,e,s)}created(t,e,s,n="stopped"){this.container.querySelector(".instances__container").insertAdjacentHTML("beforeEnd",this.instance.render(t,n)),this.createLog(t,e,s);const i=document.querySelector(".dashboard__instances");i.scrollTop=i.scrollHeight}started(t,e,s){const n=document.getElementById(t),i=n.querySelector(".state__indicator"),a=n.querySelector(".state__status");n.querySelector(".actions__start-btn").classList.add("actions__start-btn_start"),i.classList.add("state__indicator_running"),a.textContent="running",this.createLog(t,e,s)}stopped(t,e,s){const n=document.getElementById(t),i=n.querySelector(".state__indicator"),a=n.querySelector(".state__status");n.querySelector(".actions__start-btn").classList.remove("actions__start-btn_start"),i.classList.remove("state__indicator_running"),a.textContent=e,this.createLog(t,e,s)}removed(t,e,s){const n=document.getElementById(t);this.instance.remove(n),this.createLog(t,e,s)}createLog(t,e,s){const n=this.container.querySelector(".worklog");n.insertAdjacentHTML("beforeEnd",this.log.render(t,e,s)),n.scrollTop=n.scrollHeight}}document.addEventListener("DOMContentLoaded",(()=>{const t=document.getElementById("root");new i(t).init()}))})();